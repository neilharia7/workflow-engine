apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "airflow.fullname" . }}-scheduler
  labels:
    app: {{ template "airflow.name" . }}-scheduler
    chart: {{ template "airflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ template "airflow.name" . }}-scheduler
  template:
    metadata:
      labels:
        app: {{ template "airflow.name" . }}-scheduler
        release: {{ .Release.Name }}
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 10
      imagePullSecrets:
        - name: {{ .Values.secrets.name }}
      containers:
        - name: {{ .Chart.Name }}-scheduler
          image: {{ .Values.images.airflow.repository }}:{{ .Values.images.airflow.tag }}
          imagePullPolicy: {{ .Values.images.airflow.pullPolicy}}
          env:
            {{- range $key, $option := .Values.env }}
            - name: {{ $key }}
              value: {{ $option }}
            {{- end }}
          args: ["scheduler"]

          {{- range tuple "readinessProbe" "livenessProbe" }}
          {{ . }}:
            initialDelaySeconds: {{ $.Values.scheduler.livenessProbe.initialDelaySeconds | default 0 }}
            timeoutSeconds: {{ $.Values.scheduler.livenessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ $.Values.scheduler.livenessProbe.failureThreshold | default 10 }}
            periodSeconds: {{ $.Values.scheduler.livenessProbe.periodSeconds | default 30 }}
            exec:
              command:
              - /usr/bin/env
              - AIRFLOW__CORE__LOGGING_LEVEL=ERROR
              - python3
              - -Wignore
              - -c
              - |
                from airflow.jobs.scheduler_job import SchedulerJob
                from airflow.utils.db import create_session
                from airflow.utils.net import get_hostname
                import sys

                with create_session() as session:
                  job = session.query(SchedulerJob).filter_by(hostname=get_hostname()).order_by(SchedulerJob.latest_heartbeat.desc()).limit(1).first()
                sys.exit(0 if job.is_alive() else 1)
          {{- end }}

