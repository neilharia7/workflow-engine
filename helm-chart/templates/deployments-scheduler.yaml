apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "airflow.fullname" . }}-scheduler
  labels:
    app: {{ template "airflow.name" . }}-scheduler
    chart: {{ template "airflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "airflow.name" . }}-scheduler
  template:
    metadata:
      labels:
        app: {{ template "airflow.name" . }}-scheduler
        release: {{ .Release.Name }}
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 20
      imagePullSecrets:
        - name: {{ .Values.secrets.name }}
      containers:
        - name: {{ .Chart.Name }}-scheduler
          image: {{ .Values.images.airflow.repository }}:{{ .Values.images.airflow.tag }}
          imagePullPolicy: {{ .Values.images.airflow.pullPolicy}}
          env:
            {{- range $key, $option := .Values.env }}
            - name: {{ $key }}
              value: {{ $option }}
            {{- end }}
          args: ["scheduler"]

          {{- range tuple "readinessProbe" "livenessProbe" }}
          {{ . }}:
            initialDelaySeconds: {{ $.Values.scheduler.livenessProbe.initialDelaySeconds | default 0 }}
            timeoutSeconds: {{ $.Values.scheduler.livenessProbe.timeoutSeconds | default 10 }}
            failureThreshold: {{ $.Values.scheduler.livenessProbe.failureThreshold | default 20 }}
            periodSeconds: {{ $.Values.scheduler.livenessProbe.periodSeconds | default 30 }}
            exec:
              command:
              - python
              - -Wignore
              - -c
              - |
                import os
                os.environ['AIRFLOW__CORE__LOGGING_LEVEL'] = 'ERROR'
                os.environ['AIRFLOW__LOGGING__LOGGING_LEVEL'] = 'ERROR'
                from airflow.jobs.scheduler_job import SchedulerJob
                from airflow.utils.net import get_hostname
                import sys
                job = SchedulerJob.most_recent_job()
                sys.exit(0 if job.is_alive() and job.hostname == get_hostname() else 1)
          {{- end }}
