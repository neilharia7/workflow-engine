apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  type: ClusterIP
  selector:
    app: airflow
    tier: rabbitmq
  ports:
    - name: node
      protocol: TCP
      port: 5672
      targetPort: node
    - name: management
      protocol: TCP
      port: 15672
      targetPort: management
---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  type: NodePort
  selector:
    app: airflow
    tier: web
  ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: web
      nodePort: 32080
---
apiVersion: v1
kind: Service
metadata:
  name: flower
spec:
  type: NodePort
  selector:
    app: airflow
    tier: flower
  ports:
    - name: flower
      protocol: TCP
      port: 5555
      targetPort: flower
      nodePort: 32081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: rabbitmq
    spec:
      restartPolicy: Always
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - name: management
              containerPort: 15672
            - name: node
              containerPort: 5672
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: airflow
            - name: RABBITMQ_DEFAULT_PASS
              value: airflow
            - name: RABBITMQ_DEFAULT_VHOST
              value: airflow
  selector:
    matchLabels:
      app: airflow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: web
    spec:
      restartPolicy: Always
      containers:
        - name: web
          image: 740186269845.dkr.ecr.ap-south-1.amazonaws.com/flowxpert-engine:latest
          imagePullPolicy: Always
          env:
            - name: AIRFLOW_HOME
              value: "/usr/local/airflow"
          ports:
            - name: web
              containerPort: 8080
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 256Mi
          args: ["webserver"]
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            failureThreshold: 20
            periodSeconds: 5
          readinessProbe:
            httpGet:
              port: 8080
              path: /health
            initialDelaySeconds: 30
            timeoutSeconds: 30
            failureThreshold: 20
            periodSeconds: 5
      imagePullSecrets:
        - name: ap-south-1-ecr-registry
  selector:
    matchLabels:
      app: airflow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flower
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: flower
    spec:
      restartPolicy: Always
      containers:
        - name: flower
          image: 740186269845.dkr.ecr.ap-south-1.amazonaws.com/flowxpert-engine:latest
          imagePullPolicy: Always
          env:
            - name: AIRFLOW_HOME
              value: "/usr/local/airflow"
            # To prevent the error: ValueError: invalid literal for int() with base 10: 'tcp://10.0.0.83:5555'
            - name: FLOWER_PORT
              value: "5555"
          ports:
            - name: flower
              containerPort: 5555
          args: ["flower"]
      imagePullSecrets:
        - name: ap-south-1-ecr-registry
  selector:
    matchLabels:
      app: airflow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: scheduler
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 10
      containers:
        - name: scheduler
          image: 740186269845.dkr.ecr.ap-south-1.amazonaws.com/flowxpert-engine:latest
          imagePullPolicy: Always
          # volumes:
          #     - /localpath/to/dags:/usr/local/airflow/dags
          env:
            - name: AIRFLOW_HOME
              value: "/usr/local/airflow"
          readinessProbe:
           initialDelaySeconds: 10
           timeoutSeconds: 10
           failureThreshold: 20
           periodSeconds: 30
           exec:
             command:
               - /usr/bin/env
               - AIRFLOW__CORE__LOGGING_LEVEL=ERROR
               - python3
               - -Wignore
               - -c
               - |
                 from airflow.jobs.scheduler_job import SchedulerJob
                 from airflow.utils.db import create_session
                 from airflow.utils.net import get_hostname
                 import sys
                 with create_session() as session:
                   job = session.query(SchedulerJob).filter_by(hostname=get_hostname()).order_by(SchedulerJob.latest_heartbeat.desc()).limit(1).first()
                 sys.exit(0 if job.is_alive() else 1)
          args: ["scheduler"]
      imagePullSecrets:
        - name: ap-south-1-ecr-registry
  selector:
    matchLabels:
      app: airflow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: airflow
        tier: worker
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 10
      containers:
        - name: worker
          image: 740186269845.dkr.ecr.ap-south-1.amazonaws.com/flowxpert-engine:latest
          imagePullPolicy: Always

          # volumes:
          #     - /localpath/to/dags:/usr/local/airflow/dags
          env:
            - name: AIRFLOW_HOME
              value: "/usr/local/airflow"
          ports:
            - containerPort: 8973
              name: worker
          args: ["worker"]
      imagePullSecrets:
        - name: ap-south-1-ecr-registry
  selector:
    matchLabels:
      app: airflow
---
apiVersion: v1
kind: Service
metadata:
  name: worker-service
spec:
  type: NodePort
  selector:
    app: worker
    tier: web
  ports:
    - name: worker
      protocol: TCP
      port: 8973
      targetPort: worker